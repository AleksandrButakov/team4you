plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.10.0'
    id "io.freefair.lombok" version "8.3"
}

repositories {
    mavenCentral()
}

def seleniumVersion = "4.12.1",
    selenideVersion = "6.17.2",
    webDriverManager = "5.5.3",
    allureVersion = "2.24.0",
    slf4jVersion = "2.0.9",
    junitJupiterVersion = "5.10.0",
    ownerVersion = "1.0.12",
    assertjCoreVersion = "3.24.2",
    restAssuredVersion = "5.3.2",
    javafakerVersion = "1.0.2"

allure {
    report {
        version.set(allureVersion)
    }
    adapter { // отвечает за появление папочки build/allure-results
        aspectjWeaver.set(true) //обработка аннотации @Step
        frameworks {
            junit5 { //название фреймворка
                adapterVersion.set(allureVersion) //версия интеграции фреймворка и Allure
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

dependencies {

    def implementation = testImplementation(
            "org.seleniumhq.selenium:selenium-java:$seleniumVersion",
            "com.codeborne:selenide:$selenideVersion",
            "io.github.bonigarcia:webdrivermanager:$webDriverManager",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "org.slf4j:slf4j-simple:$slf4jVersion",
            "org.junit.jupiter:junit-jupiter:$junitJupiterVersion",
            "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion",
            "org.aeonbits.owner:owner:$ownerVersion",
            "org.assertj:assertj-core:$assertjCoreVersion",
            "io.rest-assured:rest-assured:$restAssuredVersion",
            "io.rest-assured:json-schema-validator:$restAssuredVersion",
            "com.github.javafaker:javafaker:$javafakerVersion"
    )
}

tasks.withType(Test).configureEach {
    systemProperties(System.getProperties())
    useJUnitPlatform()

    systemProperties(System.getProperties())

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ]
    }

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

tasks.register('ui_tests', Test) {
    useJUnitPlatform {
        includeTags("ui")
    }
}

tasks.register('api_tests', Test) {
    useJUnitPlatform {
        includeTags("api")
    }
}